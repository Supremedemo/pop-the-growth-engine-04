
import { useState } from "react";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Copy, Download, Code, Zap, ShoppingBag } from "lucide-react";
import { CanvasState } from "@/components/PopupBuilder";
import { toast } from "sonner";

interface TemplatePublisherProps {
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  canvasData: CanvasState;
  templateName: string;
  generatedCode: {
    html: string;
    css: string;
    js: string;
  };
}

export const TemplatePublisher = ({
  isOpen,
  onOpenChange,
  canvasData,
  templateName,
  generatedCode
}: TemplatePublisherProps) => {
  const [shopifyStoreUrl, setShopifyStoreUrl] = useState("");
  const [beaconApiKey, setBeaconApiKey] = useState("");

  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text);
    toast.success(`${label} copied to clipboard!`);
  };

  const downloadFile = (content: string, filename: string, type: string) => {
    const blob = new Blob([content], { type });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast.success(`${filename} downloaded!`);
  };

  const generateShopifyLiquid = () => {
    return `{% comment %}
  Popup Template: ${templateName}
  Generated by PopupBuilder
{% endcomment %}

{% if template contains 'index' or template contains 'product' %}
  <div id="popup-styles">
    <style>
      ${generatedCode.css}
    </style>
  </div>

  <div id="popup-content">
    ${generatedCode.html.replace(/popup-form/g, 'popup-form" action="/contact" method="post')}
  </div>

  <script>
    ${generatedCode.js}
    
    // Shopify-specific enhancements
    if (typeof Shopify !== 'undefined') {
      // Track with Shopify Analytics
      window.popupTracker = {
        track: function(event, data) {
          if (Shopify.analytics) {
            Shopify.analytics.publish(event, {
              ...data,
              popup_name: '${templateName}',
              page_type: '{{ template }}'
            });
          }
        }
      };
    }
  </script>
{% endif %}`;
  };

  const generateJSBeacon = () => {
    return `(function() {
  // PopupBuilder JS Beacon for ${templateName}
  
  var popupConfig = {
    apiKey: '${beaconApiKey || 'YOUR_API_KEY'}',
    templateId: '${Math.random().toString(36).substr(2, 9)}',
    templateName: '${templateName}',
    canvasData: ${JSON.stringify(canvasData, null, 2)}
  };
  
  // Create popup tracker
  window.popupTracker = {
    apiEndpoint: 'https://your-domain.com/api/track',
    
    track: function(event, data) {
      fetch(this.apiEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + popupConfig.apiKey
        },
        body: JSON.stringify({
          event: event,
          data: data,
          templateId: popupConfig.templateId,
          templateName: popupConfig.templateName,
          url: window.location.href,
          timestamp: Date.now(),
          userAgent: navigator.userAgent,
          referrer: document.referrer
        })
      }).catch(function(error) {
        console.warn('PopupBuilder tracking error:', error);
      });
    }
  };
  
  // Inject styles
  var styleSheet = document.createElement('style');
  styleSheet.textContent = \`${generatedCode.css}\`;
  document.head.appendChild(styleSheet);
  
  // Inject popup HTML
  var popupContainer = document.createElement('div');
  popupContainer.innerHTML = \`${generatedCode.html}\`;
  document.body.appendChild(popupContainer);
  
  // Inject and execute popup JavaScript
  var script = document.createElement('script');
  script.textContent = \`${generatedCode.js}\`;
  document.body.appendChild(script);
  
  // Track beacon loaded
  window.popupTracker.track('beacon_loaded', {
    loadTime: Date.now()
  });
})();`;
  };

  const fullHTMLTemplate = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${templateName} - Popup Template</title>
    <style>
        ${generatedCode.css}
    </style>
</head>
<body>
    ${generatedCode.html}
    
    <script>
        ${generatedCode.js}
    </script>
</body>
</html>`;

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Code className="w-5 h-5" />
            Publish Template: {templateName}
          </DialogTitle>
          <DialogDescription>
            Export your template as code or integrate it with external platforms
          </DialogDescription>
        </DialogHeader>

        <Tabs defaultValue="html" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="html">HTML Export</TabsTrigger>
            <TabsTrigger value="shopify">Shopify Liquid</TabsTrigger>
            <TabsTrigger value="beacon">JS Beacon</TabsTrigger>
            <TabsTrigger value="preview">Live Preview</TabsTrigger>
          </TabsList>

          <TabsContent value="html" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Download className="w-4 h-4" />
                  Complete HTML Template
                </CardTitle>
                <div className="flex gap-2">
                  <Button size="sm" onClick={() => downloadFile(fullHTMLTemplate, `${templateName}.html`, 'text/html')}>
                    Download HTML
                  </Button>
                  <Button size="sm" variant="outline" onClick={() => copyToClipboard(fullHTMLTemplate, 'HTML Template')}>
                    <Copy className="w-4 h-4 mr-1" />
                    Copy HTML
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <Textarea 
                  value={fullHTMLTemplate} 
                  readOnly 
                  className="font-mono text-xs h-64" 
                />
              </CardContent>
            </Card>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card>
                <CardHeader>
                  <CardTitle className="text-sm">HTML</CardTitle>
                  <Button size="sm" variant="outline" onClick={() => copyToClipboard(generatedCode.html, 'HTML')}>
                    <Copy className="w-3 h-3 mr-1" />
                    Copy
                  </Button>
                </CardHeader>
                <CardContent>
                  <Textarea value={generatedCode.html} readOnly className="font-mono text-xs h-32" />
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-sm">CSS</CardTitle>
                  <Button size="sm" variant="outline" onClick={() => copyToClipboard(generatedCode.css, 'CSS')}>
                    <Copy className="w-3 h-3 mr-1" />
                    Copy
                  </Button>
                </CardHeader>
                <CardContent>
                  <Textarea value={generatedCode.css} readOnly className="font-mono text-xs h-32" />
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-sm">JavaScript</CardTitle>
                  <Button size="sm" variant="outline" onClick={() => copyToClipboard(generatedCode.js, 'JavaScript')}>
                    <Copy className="w-3 h-3 mr-1" />
                    Copy
                  </Button>
                </CardHeader>
                <CardContent>
                  <Textarea value={generatedCode.js} readOnly className="font-mono text-xs h-32" />
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="shopify" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <ShoppingBag className="w-4 h-4" />
                  Shopify Liquid Template
                </CardTitle>
                <div className="flex items-center gap-2 mb-4">
                  <Badge variant="secondary">Liquid Tags</Badge>
                  <Badge variant="outline">Theme Integration</Badge>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="shopifyUrl">Store URL (optional)</Label>
                  <Input
                    id="shopifyUrl"
                    value={shopifyStoreUrl}
                    onChange={(e) => setShopifyStoreUrl(e.target.value)}
                    placeholder="your-store.myshopify.com"
                  />
                </div>
                
                <div className="flex gap-2">
                  <Button onClick={() => downloadFile(generateShopifyLiquid(), `${templateName}.liquid`, 'text/plain')}>
                    Download .liquid File
                  </Button>
                  <Button variant="outline" onClick={() => copyToClipboard(generateShopifyLiquid(), 'Shopify Liquid')}>
                    <Copy className="w-4 h-4 mr-1" />
                    Copy Code
                  </Button>
                </div>
                
                <Textarea 
                  value={generateShopifyLiquid()} 
                  readOnly 
                  className="font-mono text-xs h-64" 
                />
                
                <div className="p-4 bg-blue-50 rounded-lg">
                  <h4 className="font-medium mb-2">Installation Instructions:</h4>
                  <ol className="text-sm space-y-1 list-decimal list-inside">
                    <li>Download the .liquid file</li>
                    <li>Upload to your theme's <code>snippets/</code> folder</li>
                    <li>Include in your template: <code>{% raw %}{% include 'popup-template' %}{% endraw %}</code></li>
                    <li>The popup will automatically appear on index and product pages</li>
                  </ol>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="beacon" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Zap className="w-4 h-4" />
                  JavaScript Beacon
                </CardTitle>
                <div className="flex items-center gap-2 mb-4">
                  <Badge variant="secondary">Remote Loading</Badge>
                  <Badge variant="outline">Cross-Site</Badge>
                  <Badge variant="outline">Analytics Ready</Badge>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="beaconApiKey">API Key (for tracking)</Label>
                  <Input
                    id="beaconApiKey"
                    value={beaconApiKey}
                    onChange={(e) => setBeaconApiKey(e.target.value)}
                    placeholder="your-api-key-here"
                  />
                </div>
                
                <div className="flex gap-2">
                  <Button onClick={() => downloadFile(generateJSBeacon(), `${templateName}-beacon.js`, 'text/javascript')}>
                    Download Beacon
                  </Button>
                  <Button variant="outline" onClick={() => copyToClipboard(generateJSBeacon(), 'JS Beacon')}>
                    <Copy className="w-4 h-4 mr-1" />
                    Copy Code
                  </Button>
                </div>
                
                <Textarea 
                  value={generateJSBeacon()} 
                  readOnly 
                  className="font-mono text-xs h-64" 
                />
                
                <div className="p-4 bg-green-50 rounded-lg">
                  <h4 className="font-medium mb-2">Beacon Usage:</h4>
                  <ol className="text-sm space-y-1 list-decimal list-inside">
                    <li>Add this script tag to any website: <code>&lt;script src="path/to/{templateName}-beacon.js"&gt;&lt;/script&gt;</code></li>
                    <li>Or embed the code directly in a script tag</li>
                    <li>The popup will automatically load and track events</li>
                    <li>Events are sent to your analytics endpoint</li>
                  </ol>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="preview" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Live Preview</CardTitle>
                <p className="text-sm text-gray-600">See how your popup will look on a website</p>
              </CardHeader>
              <CardContent>
                <div 
                  className="border rounded-lg p-4 bg-gray-50 relative min-h-96"
                  dangerouslySetInnerHTML={{ 
                    __html: `
                      <style>${generatedCode.css}</style>
                      ${generatedCode.html}
                      <script>${generatedCode.js}</script>
                    ` 
                  }}
                />
                <div className="mt-4 text-center">
                  <Button onClick={() => {
                    const previewWindow = window.open('', '_blank', 'width=800,height=600');
                    previewWindow?.document.write(fullHTMLTemplate);
                    previewWindow?.document.close();
                  }}>
                    Open in New Window
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
};
